// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.main = function() {
	var currentPattern = "Builder";
	switch(currentPattern) {
	case "AbstractFactory":
		new patterns_AbstractFactoryPattern();
		break;
	case "Builder":
		new patterns_BuilderPattern();
		break;
	case "FactoryMethod":
		new patterns_FactoryMethodPattern();
		break;
	}
};
var patterns_AbstractFactoryPattern = function() {
	this.thinkpadFactory = new patterns_abstractFactory_ThinkpadFactory();
	this.dellFactory = new patterns_abstractFactory_DellFactory();
	console.log("patterns/AbstractFactoryPattern.hx:12:","Пример абстрактоной фабрики");
	this.imitateProcess("dell");
	this.imitateProcess("thinkpad");
};
patterns_AbstractFactoryPattern.prototype = {
	imitateProcess: function(someConfigField) {
		this.switchFactory(someConfigField);
		this.createLaptop();
		this.createKeyboard();
	}
	,switchFactory: function(someConfigField) {
		switch(someConfigField) {
		case "dell":
			this.factory = this.dellFactory;
			break;
		case "thinkpad":
			this.factory = this.thinkpadFactory;
			break;
		default:
			console.log("patterns/AbstractFactoryPattern.hx:30:","Invalid argument for factory: " + someConfigField);
		}
	}
	,createLaptop: function() {
		var laptop = this.factory.createLaptop();
	}
	,createKeyboard: function() {
		var keyboard = this.factory.createKeyboard();
	}
};
var patterns_BuilderPattern = function() {
	var bobaBuilder = new patterns_builder_BobaBuilder();
	var bibaBuilder = new patterns_builder_BibaBuilder();
	var director = new patterns_builder_Director();
	director.makeAB(bobaBuilder);
	director.makeCA(bibaBuilder);
};
var patterns_FactoryMethodPattern = function() {
	this.imitateWork("player");
	this.imitateWork("enemy");
};
patterns_FactoryMethodPattern.prototype = {
	switchFactory: function(type) {
		switch(type) {
		case "enemy":
			this.factory = new patterns_factoryMethod_EnemyFactory(Math.random(),Math.random());
			break;
		case "player":
			this.factory = new patterns_factoryMethod_PlayerFactory(Math.random(),Math.random());
			break;
		}
	}
	,imitateWork: function(type) {
		this.switchFactory(type);
		this.factory.doFancyStuff();
	}
};
var patterns_abstractFactory_DellFactory = function() {
};
patterns_abstractFactory_DellFactory.prototype = {
	createKeyboard: function() {
		return new patterns_abstractFactory_DellKeyboard();
	}
	,createLaptop: function() {
		return new patterns_abstractFactory_DellLaptop();
	}
};
var patterns_abstractFactory_Keyboard = function() {
	console.log("patterns/abstractFactory/Keyboard.hx:10:",this.model);
};
patterns_abstractFactory_Keyboard.prototype = {
	getSwitches: function() {
		return this.switches;
	}
	,returnDsiplay: function() {
		return this.mechanical;
	}
};
var patterns_abstractFactory_DellKeyboard = function() {
	this.model = "Клавиатура Dell";
	patterns_abstractFactory_Keyboard.call(this);
};
patterns_abstractFactory_DellKeyboard.__super__ = patterns_abstractFactory_Keyboard;
patterns_abstractFactory_DellKeyboard.prototype = $extend(patterns_abstractFactory_Keyboard.prototype,{
});
var patterns_abstractFactory_Laptop = function() {
	console.log("patterns/abstractFactory/Laptop.hx:9:",this.model);
};
patterns_abstractFactory_Laptop.prototype = {
	getModel: function() {
		return this.model;
	}
	,getDisplay: function() {
		return this.display;
	}
};
var patterns_abstractFactory_DellLaptop = function() {
	this.model = "Ноутбук Dell";
	patterns_abstractFactory_Laptop.call(this);
};
patterns_abstractFactory_DellLaptop.__super__ = patterns_abstractFactory_Laptop;
patterns_abstractFactory_DellLaptop.prototype = $extend(patterns_abstractFactory_Laptop.prototype,{
});
var patterns_abstractFactory_ThinkpadFactory = function() {
};
patterns_abstractFactory_ThinkpadFactory.prototype = {
	createKeyboard: function() {
		return new patterns_abstractFactory_ThinkpadKeyboard();
	}
	,createLaptop: function() {
		return new patterns_abstractFactory_ThinkpadLaptop();
	}
};
var patterns_abstractFactory_ThinkpadKeyboard = function() {
	this.model = "Клавиатура Thinkpad";
	patterns_abstractFactory_Keyboard.call(this);
};
patterns_abstractFactory_ThinkpadKeyboard.__super__ = patterns_abstractFactory_Keyboard;
patterns_abstractFactory_ThinkpadKeyboard.prototype = $extend(patterns_abstractFactory_Keyboard.prototype,{
});
var patterns_abstractFactory_ThinkpadLaptop = function() {
	this.model = "Ноутбук thinkpad";
	patterns_abstractFactory_Laptop.call(this);
};
patterns_abstractFactory_ThinkpadLaptop.__super__ = patterns_abstractFactory_Laptop;
patterns_abstractFactory_ThinkpadLaptop.prototype = $extend(patterns_abstractFactory_Laptop.prototype,{
});
var patterns_builder_Biba = function() {
};
patterns_builder_Biba.prototype = {
	makeA: function() {
		console.log("patterns/builder/Biba.hx:9:","Вот тут вставляют штуки в бибу");
	}
	,makeB: function() {
		console.log("patterns/builder/Biba.hx:13:","А тут ее настраивают");
	}
	,makeC: function() {
		console.log("patterns/builder/Biba.hx:17:","Вот здесь биба получает свою последнюю деталь");
	}
};
var patterns_builder_Builder = function() {
};
patterns_builder_Builder.prototype = {
	makeA: function() {
	}
	,makeB: function() {
	}
	,makeC: function() {
	}
	,getResult: function() {
		return null;
	}
};
var patterns_builder_BibaBuilder = function() {
	this.biba = new patterns_builder_Biba();
	patterns_builder_Builder.call(this);
};
patterns_builder_BibaBuilder.__super__ = patterns_builder_Builder;
patterns_builder_BibaBuilder.prototype = $extend(patterns_builder_Builder.prototype,{
	makeA: function() {
		this.biba.makeA();
	}
	,makeB: function() {
		this.biba.makeB();
	}
	,makeC: function() {
		this.biba.makeC();
	}
	,getResult: function() {
		return this.biba;
	}
});
var patterns_builder_Boba = function() {
};
patterns_builder_Boba.prototype = {
	makeX: function() {
		console.log("patterns/builder/Boba.hx:9:","У бобы другие штуки, она не разделяет интерфейс с бибой");
	}
	,makeY: function() {
		console.log("patterns/builder/Boba.hx:13:","Говорят что боба лучше бибы");
	}
	,makeZ: function() {
		console.log("patterns/builder/Boba.hx:17:","Вот бы в бухгалтерии не перепутали");
	}
};
var patterns_builder_BobaBuilder = function() {
	this.boba = new patterns_builder_Boba();
	patterns_builder_Builder.call(this);
};
patterns_builder_BobaBuilder.__super__ = patterns_builder_Builder;
patterns_builder_BobaBuilder.prototype = $extend(patterns_builder_Builder.prototype,{
	makeA: function() {
		this.boba.makeX();
	}
	,makeB: function() {
		this.boba.makeY();
	}
	,makeC: function() {
		this.boba.makeZ();
	}
	,getResult: function() {
		return this.boba;
	}
});
var patterns_builder_Director = function() {
};
patterns_builder_Director.prototype = {
	makeABC: function(builder) {
		builder.makeA();
		builder.makeB();
		builder.makeC();
	}
	,makeAB: function(builder) {
		builder.makeA();
		builder.makeB();
	}
	,makeCA: function(builder) {
		builder.makeC();
		builder.makeA();
	}
};
var patterns_factoryMethod_AbstractFactory = function(x,y) {
	this.objX = x;
	this.objY = y;
};
patterns_factoryMethod_AbstractFactory.prototype = {
	doFancyStuff: function() {
		if(this.obj == null) {
			this.obj = this.createGameObject(this.objX,this.objY);
		}
		this.obj.setSpeed(Math.random() * 100 - 50);
	}
	,createGameObject: function(x,y) {
		this.obj = new patterns_factoryMethod_DefaultObject(x,y);
		return this.obj;
	}
};
var patterns_factoryMethod_GameObject = function(x,y) {
	this.speed = 0;
	this.x = x;
	this.y = y;
};
patterns_factoryMethod_GameObject.prototype = {
	setSpeed: function(speed) {
		this.speed = speed;
	}
	,getSpeed: function() {
		return this.speed;
	}
	,update: function() {
		this.x += this.x * this.speed;
		this.y += this.y * this.speed;
	}
};
var patterns_factoryMethod_DefaultObject = function(x,y) {
	patterns_factoryMethod_GameObject.call(this,x,y);
};
patterns_factoryMethod_DefaultObject.__super__ = patterns_factoryMethod_GameObject;
patterns_factoryMethod_DefaultObject.prototype = $extend(patterns_factoryMethod_GameObject.prototype,{
});
var patterns_factoryMethod_Enemy = function(x,y) {
	patterns_factoryMethod_GameObject.call(this,x,y);
};
patterns_factoryMethod_Enemy.__super__ = patterns_factoryMethod_GameObject;
patterns_factoryMethod_Enemy.prototype = $extend(patterns_factoryMethod_GameObject.prototype,{
	update: function() {
		this.x = Math.random();
		this.y = this.speed * this.x;
	}
});
var patterns_factoryMethod_EnemyFactory = function(x,y) {
	patterns_factoryMethod_AbstractFactory.call(this,x,y);
};
patterns_factoryMethod_EnemyFactory.__super__ = patterns_factoryMethod_AbstractFactory;
patterns_factoryMethod_EnemyFactory.prototype = $extend(patterns_factoryMethod_AbstractFactory.prototype,{
	createGameObject: function(x,y) {
		this.obj = new patterns_factoryMethod_Enemy(x,y);
		return this.obj;
	}
});
var patterns_factoryMethod_Player = function(x,y) {
	patterns_factoryMethod_GameObject.call(this,x,y);
};
patterns_factoryMethod_Player.__super__ = patterns_factoryMethod_GameObject;
patterns_factoryMethod_Player.prototype = $extend(patterns_factoryMethod_GameObject.prototype,{
	update: function() {
		this.x -= this.speed;
		this.y -= this.speed;
	}
});
var patterns_factoryMethod_PlayerFactory = function(x,y) {
	patterns_factoryMethod_AbstractFactory.call(this,x,y);
};
patterns_factoryMethod_PlayerFactory.__super__ = patterns_factoryMethod_AbstractFactory;
patterns_factoryMethod_PlayerFactory.prototype = $extend(patterns_factoryMethod_AbstractFactory.prototype,{
	createGameObject: function(x,y) {
		this.obj = new patterns_factoryMethod_Player(x,y);
		return this.obj;
	}
});
Main.main();
})({});
